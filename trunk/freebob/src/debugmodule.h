/* debugmodule.h
 * Copyright (C) 2004 by Daniel Wagner
 *
 * This file is part of FreeBob.
 *
 * FreeBob is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * FreeBob is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FreeBob; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA.
 */

#ifndef DEBUGMODULE_H
#define DEBUGMODULE_H

#include <stdio.h>
#include "ieee1394service.h"

// global debug control. undefine to disable debug output
#define DEBUG

// debug print control flags
#define DEBUG_LEVEL_INFO            (1<<0)
#define DEBUG_LEVEL_DEVICE          (1<<1)
#define DEBUG_LEVEL_SUBUNIT         (1<<2)
#define DEBUG_LEVEL_DESCRIPTOR      (1<<3)
#define DEBUG_LEVEL_INFOBLOCK       (1<<4)
#define DEBUG_LEVEL_TRANSFERS       (1<<5)

// convenience defines
#define DEBUG_LEVEL_ALL      (DEBUG_LEVEL_INFO | DEBUG_LEVEL_DEVICE | DEBUG_LEVEL_SUBUNIT | DEBUG_LEVEL_DESCRIPTOR | DEBUG_LEVEL_INFOBLOCK | DEBUG_LEVEL_TRANSFERS )
#define DEBUG_LEVEL_LOW      (DEBUG_LEVEL_INFO | DEBUG_LEVEL_DEVICE)
#define DEBUG_LEVEL_MODERATE (DEBUG_LEVEL_INFO | DEBUG_LEVEL_DEVICE | DEBUG_LEVEL_SUBUNIT)
#define DEBUG_LEVEL_HIGH     (DEBUG_LEVEL_MODERATE | DEBUG_LEVEL_DESCRIPTOR | DEBUG_LEVEL_INFOBLOCK)

// control the type of output to be generated by the debug macro's
//  make sure that only one of them is defined. comment out the others.
//  note: the HTML option is only usefull if you enclose the output in <pre>....</pre> tags
#define DEBUG_OUTPUT_ANSICOLORED  
//#define DEBUG_OUTPUT_STANDARD
//#define DEBUG_OUTPUT_HTML

#ifdef DEBUG
	// this allows for debug level control inside the code (e.g. enable transfer logging for some specific code block)
	static int DEBUG_LEVEL=DEBUG_LEVEL_HIGH;
	#define setDebugLevel(x) (DEBUG_LEVEL=x)
		
    #ifdef DEBUG_OUTPUT_ANSICOLORED

		#define debugError(format, args...) fprintf( stderr, "\033[37m\033[41m" "ERROR: %s %s %d: " format "\033[0m\033[49m ",  __FILE__, __FUNCTION__, __LINE__, ##args )
			
		#define debugPrint(Level, format, args...) if(DEBUG_LEVEL & Level) printf("\033[37m" "DEBUG %s %s %d:" "%s " format "\033[0m", __FILE__, __FUNCTION__, __LINE__, getLevelColor(Level), ##args );
		#define debugPrintShort(Level, format, args...) if(DEBUG_LEVEL & Level) printf("%s" format "\033[0m",getLevelColor(Level), ##args );

		inline char *getLevelColor(unsigned int Level) {
			switch(Level) {
				case DEBUG_LEVEL_INFO:
					return "\033[31m";
				break;
				case DEBUG_LEVEL_DEVICE:
					return "\033[32m";
				break;
				case DEBUG_LEVEL_SUBUNIT:
					return "\033[33m";
				break;
				case DEBUG_LEVEL_DESCRIPTOR:
					return "\033[34m"; // blue
				break;
				case DEBUG_LEVEL_INFOBLOCK: // purple
					return "\033[35m";
				break;
				case DEBUG_LEVEL_TRANSFERS:
					return "\033[36m";
				break;
				default:
					return "\033[0m";
				break;
						
			}
		}

	#endif
	
	#ifdef DEBUG_OUTPUT_HTML
		#define debugError(format, args...) fprintf( stdout, "<P style='background: red;'><FONT color='white'>" "ERROR: %s %s %d: " format "</FONT></P>",  __FILE__, __FUNCTION__, __LINE__, ##args )
		#define debugPrint(Level, format, args...) if(DEBUG_LEVEL & Level) printf("<FONT color='darkGray'>" "DEBUG %s %s %d:" "%s " format "</FONT></FONT>", __FILE__, __FUNCTION__, __LINE__, getLevelColor(Level), ##args );
		#define debugPrintShort(Level, format, args...) if(DEBUG_LEVEL & Level) printf("%s" format "</FONT>",getLevelColor(Level), ##args );
		inline char *getLevelColor(unsigned int Level) {
			switch(Level) {
				case DEBUG_LEVEL_INFO:
					return "<FONT color='darkRed'>";
				break;
				case DEBUG_LEVEL_DEVICE:
					return "<FONT color='darkGreen'>";
				break;
				case DEBUG_LEVEL_SUBUNIT:
					return "<FONT color='darkYellow'>";
				break;
				case DEBUG_LEVEL_DESCRIPTOR:
					return "<FONT color='darkBlue'>"; // blue
				break;
				case DEBUG_LEVEL_INFOBLOCK: // purple
					return "<FONT color='darkMagenta'>";
				break;
				case DEBUG_LEVEL_TRANSFERS:
					return "<FONT color='darkCyan'>";
				break;
				default:
					return "<FONT color='black'>";
				break;
						
			}
		}
	#endif	
	
	#ifdef DEBUG_OUTPUT_STANDARD
		#define debugError(format, args...) fprintf( stderr, "ERROR: %s %s %d: " format,  __FILE__, __FUNCTION__, __LINE__, ##args )
		#define debugPrint(Level, format, args...) if(DEBUG_LEVEL & Level) printf("DEBUG %s %s %d :"  format, __FILE__, __FUNCTION__, __LINE__, ##args );
		#define debugPrintShort(Level, format, args...) if(DEBUG_LEVEL & Level) printf(format, ##args );
	#endif
	
#else
	#define DEBUG_LEVEL
	#define setDebugLevel(x)
	#define debugError(format, args...) 
	#define debugPrint(Level, format, args...) 
#endif

unsigned char toAscii(unsigned char c);
void quadlet2char(quadlet_t quadlet,unsigned char* buff);
void hexDump(unsigned char *data_start, unsigned int length);

#endif
