/*
 * This is the main page of the FreeBoB reference manual, built using
 * doxygen.
 */

/**
@mainpage FreeBoB - Firewire (pro-)audio for Linux

@section intro Introduction

FreeBoB is intended as an intermediate layer between the Linux1394 kernel/userspace layer, and the 

@see <http://freebob.sourceforge.net>

@section library Client side library

FreeBoB presents an interface that can be used to implement backends for various audio
API's. Currently the best support is for the JACK backend. It is also intended to implement configuration applications like mixer controls etc..

The library API is split in two parts:
  - @ref freebob.h "<libfreebob/freebob.h>" is the discovery & configuration interface
  - @ref freebob_streaming.h "<libfreebob/freebob_streaming.h>" is the streaming interface


@section devicesupport Adding support for unsupported devices

Initial support is/was for BeBoB devices only, however the framework 
is usable for all firewire audio devices.

 Device support is implemented on two levels:
 1) Discovery & configuration
 2) Streaming layer
 
 Layer 1 is implemented by subclassing the IAvDevice interface, and adding an appropriate 
 probe function to devicemanager.cpp.
 Layer 2 is implemented by subclassing the StreamProcessor class in src/libstreaming/
 
 Basic operation of libfreebob is:
 - Create a DeviceManager that iterates over all nodes connected to the 1394 bus. 
   For every node present, it tries the probeFunctions (probeBeBoB, probeMotu, ...).
   If a probefunction succeeds, the node is considered to be a freeob supported device.
   The probefunction should return a pointer to a AvDevice, i.e. a subclass of this
   interface. At this point we have access to all supported devices.
 
 - When the streaming layer is started (e.g. by jackd), it will iterate over all AvDevices of
   the DeviceManager. For every device:
   The streaming layer will (most likely) set some config values (at this moment only the
   samplerate). Then will then request the number of ISO streams the device provides using
   getStreamCount(). Most likely this will be 2 streams, one transmit and one receive.
   The next step is that for every stream a streamprocessor is requested using
   getStreamProcessorByIndex(i) (i starts at 0). This streamprocessor is responsible for
   the translation between ISO stream and audio API. A streamprocessor is a class that is
   a subclass of StreamProcessor (see the documentation of that class for more info).
   
 - Once the streaming layer has all streamprocessors of all devices, it will proceed with
   initializing them, and setting up all support stuff (threads, ISO handlers, etc...)
 
 - After this initial setup, the streaming layer will ask the AvDevice to start the streams
   on the hardware device, using startStreamByIndex(). When the streaming layer shuts down,
   it will use stopStreamByIndex() to stop the device's streams, and free up the (possibly
   allocated) bus resources.
   
   \note the jackd backend also supports to specify a specific node. In that case only the
         AvDevice for that node is used, instead of iterating over all of them.
   \note Starting the hardware streams is part of the IAvDevice because this allows for a 
         more generic streamprocessor for AMDTP streams. This stream format is used by
         BeBoB's, DICE-II devices, mLan devices, etc. Keeping the start/stop system 
         separate from the streamprocessor allows the re-use of the streamprocessor should
         the start/stop mechanism differ.
 
 In order to add support for a device to freebob, two things should be implemented:
  - an IAvDevice descendant that takes care of the device discovery & configuration
  - a StreamProcessor descendant that takes care of the device specific stream translation

You should take a look at the following files if you want to implement 
support for new devices:
  - @ref iavdevice.h "<src/iavdevice.h>" is the device interface.
  - @ref StreamProcessor.h "<src/libstreaming/StreamProcessor.h>" is the stream processor (translator) interface.


*/
